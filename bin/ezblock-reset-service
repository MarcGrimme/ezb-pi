#!/usr/bin/python3
# -*- coding utf-8 -*-

from ezblock import Pin, delay
import time
import tempfile
import subprocess
reset_switch = Pin("RST")
ble_reset = Pin("BLERST")
status_led = Pin("LED")
resize_script = "/usr/bin/resize_once"

reset_switch.pull(Pin.PULL_UP)

is_reset = None

def log(msg):
    msg = "EZblock-Reset-Service [{}] [DEBUG] {}".format(time.asctime(), msg)
    run_command("echo {} >> /opt/ezblock/log".format(msg))
    print(msg)

def run_command(cmd):
    with tempfile.TemporaryFile() as f:
        subprocess.call(cmd, shell=True, stdout=f, stderr=f)
        f.seek(0)
        output = f.read()
        return output.decode()

def reset_callback_handler(ev):
    global is_reset
    value = reset_switch.value()
    if value == 0:
        is_reset = True
        status_led.value(0)
    else:
        is_reset = False
        status_led.value(0)

log("Check resize script")
output = run_command("ls {}".format(resize_script))
if output != "":
    log("Resizing...")
    run_command("{}".format(resize_script))
    run_command("rm {}".format(resize_script))
    log("Done.")
else:
    log("Skip")
log('Start')
log('Setup irq')
reset_switch.irq(reset_callback_handler, Pin.IRQ_RISING_FALLING)
log('Finished')
ble_reset.value(1)

def main():
    global is_reset
    count = 0
    while True:
        if is_reset == True:
            count += 1
            if count > 6:
                status_led.value(1)
        elif is_reset == False:
            if count > 6:
                log("hard reset")
                ble_reset.value(0)
                time.sleep(0.5)
                ble_reset.value(1)
            else:
                log("soft reset")
            run_command("sudo service ezblock restart")
            count = 0
            is_reset = None
        delay(500)

if __name__ == "__main__":
    try:
        main()
    finally:
        ble_reset.value(0)